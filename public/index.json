[{"content":"\u003ch2 id=\"table-of-content\"\u003eTable of content\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../reliable-scalable-and-maintainable-applications\"\u003eChapter 01 - Reliable Scalable and Maintainable Applications\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChapter 02 - Data Model and Query Language\u003c/li\u003e\n\u003cli\u003eChapter 03 - Storage and Retrieval (coming soon\u0026hellip;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"relational-model-vs-document-model\"\u003eRelational model vs Document model\u003c/h2\u003e\n\u003cp\u003eRelational model: Data is organized into relations (tables), where each relation is an unordered collection of tuples(rows).\u003c/p\u003e\n\u003cp\u003eNoSQL - Not only SQL\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNeed of NoSQL\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGreater scalability\u003c/li\u003e\n\u003cli\u003eFree and open source\u003c/li\u003e\n\u003cli\u003eDesire for a more dynamic and expressive data model\u003c/li\u003e\n\u003cli\u003eSchema flexibility\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003ePolyglot persistence\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMany to One and Many to Many relationship\u003c/strong\u003e:\nIn both the model related items are referenced by unique identifier, which is called foreign key relational model and document reference in document model. Relational model requires join and document model requires follow-up queries to fetch the records.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSchema on Read and Schema on Write\u003c/strong\u003e: Schema on read applies on document model where where there is not need to fixed schema definition in database. Where Scheme on Write applies to relational database where fixed scheme is required in database.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eData locality for query\u003c/strong\u003e: There are time when large amount of data require on same time like while fetching product also fetch all the features of the product. Document model is more appropriate in this case. But on the same time if you needs few field than its a wasteful. Updating the large document usually also require the recreate the document.\nNow there are few relational databases which allowing same kind of features where table\u0026rsquo;s rows should be nested within a parent table.\nColumn family databases have similar purpose.\u003c/p\u003e\n\u003ch2 id=\"declarative-vs-imperative-query-language-for-data\"\u003eDeclarative vs Imperative (Query language for data)\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eImperative:\u003c/strong\u003e Imperative language tell the computer a certain operation in certain order. Most of the programming languages are imperative.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDeclarative:\u003c/strong\u003e Declarative query language like SQL, you only define pattern, condition and transformation (sorting, grouping etc). Query optimizer will decide how this data will be fetched. It hides implementation details and this helps query optimizer to introduce performance improvement without requiring any changes to queries. They can also perform better in parallel execution because queries only define pattern not the algorithm.\u003c/p\u003e\n\u003cp\u003eCSS, XSL are also declarative query languages.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eMapReduce:\u003c/strong\u003e\u003c/em\u003e MapReduce is neither a declarative or fully imperative but somewhere in between, logic of query expressed with code snipped which is called repeatedly by processing. It is based upon map and reduce function.\u003c/p\u003e\n\u003ch2 id=\"graph-like-data-model\"\u003eGraph like data model\u003c/h2\u003e\n\u003cp\u003eSimple many to many relationship can handle by relational databases but if many to many relationship become complex in your data , it become natural to use graph based data model for your data.\u003c/p\u003e\n\u003cp\u003eGraph contains two kind of objects\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003evertices:\u003c/strong\u003e Known as node or entities\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eedge:\u003c/strong\u003e known as relationship\nExamples:\u003c/li\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eSocial graph\u003c/strong\u003e\u003c/em\u003e where vertices are people and edges are relationship between people.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eThe web graph\u003c/strong\u003e\u003c/em\u003e where veritces are web pages and edges are link to other pages.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eRoad or rail network\u003c/strong\u003e\u003c/em\u003e where vertices define the junctions and edges define the lines between these junctions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGraph data model is not limited to homogeneous data like FaceBook uses single graph database to store people, locations, events, check-ins etc.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eGraph databases are good for evolvability\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThere are mainly two type of models used in graph bases data model.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProperty Graphs:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003evertices consist of\n\u003cul\u003e\n\u003cli\u003eunique identifier,\u003c/li\u003e\n\u003cli\u003eset of outgoing edges,\u003c/li\u003e\n\u003cli\u003eset of incoming edges and collection of properties (key, value pair).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEdges consist of\n\u003cul\u003e\n\u003cli\u003eunique identifier,\u003c/li\u003e\n\u003cli\u003ethe vertex at which the edge start (tail vertex),\u003c/li\u003e\n\u003cli\u003ethe vertex at which edge ends (head vertex),\u003c/li\u003e\n\u003cli\u003elabel to describe relationship between two vertices\u003c/li\u003e\n\u003cli\u003ea collection of properties (key, value pair)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTriple store:\u003c/strong\u003e\nAll information store in form of very simple three part statements \u003cem\u003e\u003cstrong\u003esubject, predicate and object\u003c/strong\u003e\u003c/em\u003e.\n_:lucy a        :Person\n_:lucy :name    :\u0026ldquo;Lucy\u0026rdquo;\n_:lucy :bornIn  _:idaho\n_:idaho a       :Location\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"document-databases-vs-graph-databases\"\u003eDocument databases vs Graph databases\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDocument database target use cases where individual documents is self contains and relationship between documents are rare.\u003c/li\u003e\n\u003cli\u003eGraph database target use case is in opposite direction and target use cases where anything is potentially connected to everything.\u003c/li\u003e\n\u003cli\u003eBoth don\u0026rsquo;t require schema enforcement hence good for adopt change in requirement.\u003c/li\u003e\n\u003c/ul\u003e\n","description":"Data model and query language","image":null,"permalink":"https://maheshlogs.dev/posts/data-model-and-query-language/","title":"Chapter-02 Data model and query language"},{"content":"\u003cp\u003eWhenever I read a book, I try to underline things and later try to convert into digital notes. It almost become two phase revision of the book.\nThese notes are from Martin Kleppmann\u0026rsquo;s book: Designing Data-Intensive Applications.\u003c/p\u003e\n\u003cp\u003eDisclaimers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThese notes are not a substitute of the book.\u003c/li\u003e\n\u003cli\u003eThese notes are from my understanding of the topic and typed manually (Yes I prefer physical book over digital one) . There might be the case when I missed something.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"table-of-content\"\u003eTable of content\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eChapter 01 - Reliable Scalable and Maintainable Applications\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../data-model-and-query-language/\"\u003eChapter 02 - Data Model and Query Language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChapter 03 - Storage and Retrieval (coming soon\u0026hellip;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"chapter-01---reliable-scalable-and-maintainable-applications\"\u003eChapter 01 - Reliable, scalable, and maintainable applications\u003c/h1\u003e\n\u003cp\u003eFollowing are the building blocks which use by typical data intensive applications\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStore data in database\u003c/li\u003e\n\u003cli\u003eCaching data for remembering pre-compute result\u003c/li\u003e\n\u003cli\u003eIndexes for faster search\u003c/li\u003e\n\u003cli\u003eMessaging for async processing by other applications\u003c/li\u003e\n\u003cli\u003eBatch processing for crunching large amount of data in background\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn general database, messaging system, caching all store data but they all serves different purpose. There are new systems which again blurring the boundaries like redis which store data on the same time its also provide queuing while Apache Kafka is a messaging queue which provide database like durability guaranty.\u003c/p\u003e\n\u003cp\u003eImportant concerns for most of the software system\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eReliability\u003c/strong\u003e - System should work as per expected even when it face some kind failures like hardware/software fault, human error etc.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eScalability\u003c/strong\u003e - As system grows there should be reasonable way to handle the growth.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMaintainability\u003c/strong\u003e -  As system getting old lots of people contribute to the system. As system getting older, adding changes should be productive.\u003c/p\u003e\n\u003ch2 id=\"reliability\"\u003eReliability\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eContinue to work correctly, even when things go wrong.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFault\u003c/strong\u003e - When things can\u0026rsquo;t work as expected.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFault tolerance (or resilience)\u003c/strong\u003e - When system handle expected faults called fault tolerance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFailure\u003c/strong\u003e - Failure are different from fault, when an entire system stop working that\u0026rsquo;s called failure where fault is a system misbehave in certain condition.\u003c/p\u003e\n\u003cp\u003eTo test system\u0026rsquo;s fault tolerance, deliberately introduce faults in system like randomly killing individual process and check impact on other systems.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHardware fault\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReduce by adding redundancy in hardware.\u003c/li\u003e\n\u003cli\u003eUse software fault-tolerance techniques or use in addition to hardware redundancy.\n\u003cstrong\u003eSoftware errors\u003c/strong\u003e: Software errors normally have cascading effect and error in one system cause error in another system.\u003c/li\u003e\n\u003cli\u003eMeasure, monitor and analyze system behavior in production.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eHuman error\u003c/strong\u003e: Configuration error by operators is leading cause of outrage.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDesign system in a way that minimize opportunity for error.\u003c/li\u003e\n\u003cli\u003eTest, test and test from unit test to integration test to manual testing.\u003c/li\u003e\n\u003cli\u003eQuick and easy recovery from human error like rollback of configuration changes to roll out new code gradually.\u003c/li\u003e\n\u003cli\u003eSet up detail monitoring (performance, error rate). This is also called telemetry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"scalability\"\u003eScalability\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSystem\u0026rsquo;s ability to cope with increased load.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eScalability means considering questions like\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;If the system grows in a particular way, what are the options for coping with growth\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;How can we add computing resources to handle the additional load?\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"describing-load\"\u003eDescribing load\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eLoad parameter\u003c/strong\u003e Load can be describe with few numbers.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRequest per second for web server\u003c/li\u003e\n\u003cli\u003eResponse time\u003c/li\u003e\n\u003cli\u003eRatio of read to write in DB\u003c/li\u003e\n\u003cli\u003eNumber of simultaneous active uses in chat room\u003c/li\u003e\n\u003cli\u003eHit rate on a cache\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTwitter example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePost tweet: 4.6k request/second on average, over 12k request/sec at peak\u003c/li\u003e\n\u003cli\u003eHome timeline: 300k request/sec\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"describing-performance\"\u003eDescribing performance\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhen you increase a load parameter and the keep the system resources unchanged, how the performance of your system affected?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen you increase the load parameter, how much resources you need to increase if you want to keep performance unchanged?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNote: Batch processing systems like hadoop you care about \u003cem\u003ethroughput\u003c/em\u003e (number of record process per second). For web system you care about response time.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote: \u003cem\u003e\u003cstrong\u003eLatency and response time:\u003c/strong\u003e\u003c/em\u003e Response time is what client see. Latency is the duration that a request is waiting to handle.\u003c/p\u003e\n\u003cp\u003eEven making same request again and again, you\u0026rsquo;ll get a slightly different response time every time. That\u0026rsquo;s why response time is not a single number but distributed values that you can measure.\u003c/p\u003e\n\u003cp\u003eAverage or mean response time is not a good metrics as it doesn\u0026rsquo;t tell how many users actually experience this delay.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePercentiles:\u003c/strong\u003e  If 95th percentile response time is 1.5 sec than means 95 out 100 request take less then 1.5 second and 5 out of 100 request take more than 1.5 seconds.\u003c/p\u003e\n\u003cp\u003eEx. Amazon describe requirement of response time of internal services in term of 99.9th percentile though it only affects 1 in 1000 request but customers with the slowest request have are often those customers who have most data and they\u0026rsquo;re the most valuable customers.\u003c/p\u003e\n\u003cp\u003eRequests could be fast individually but one slow request could slow down all the other requests. It takes just one slow call to make the entire end-user request slow. Tail latency amplification.\u003c/p\u003e\n\u003cp\u003ePercentiles are often used in SLOs (Service Level Objectives) and SLAs (Service Level Agreements)\u003c/p\u003e\n\u003ch3 id=\"approach-to-coping-with-load\"\u003eApproach to coping with Load\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eScaling up (vertical scaling)\u003c/li\u003e\n\u003cli\u003eScaling out (horizontal scaling)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eelastic\u003c/em\u003e means they can automatically add computing resource when they detect a load increased. They are useful if load is highly unpredictable.\u003c/p\u003e\n\u003cp\u003eManual scaled system are simpler and may have fewer operational surprises.\u003c/p\u003e\n\u003cp\u003eThere is no such thing as a generic, one size fit for all scalable architecture. The problem may be the volume of reads, the volumes of write, the volume of data to store, the complexity of the data, the response time requirements, the access pattern, or usually some mixture of all od these plus many more issues.\u003c/p\u003e\n\u003cp\u003eEx. a system design to handle 100,000 request/sec each in 1kb in size, looks very different form a system that is design for 3 request/min each 2 GB in size, even though the two system have the same data throughput.\u003c/p\u003e\n\u003ch2 id=\"maintainability\"\u003eMaintainability\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMajority of the cost of the system is not in its initial development but ongoing maintenance.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eDesign principle for software systems\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOperability: Make it easy for operation team.\n\u003cul\u003e\n\u003cli\u003eVisibility of runtime behavior\u003c/li\u003e\n\u003cli\u003eDocumentation\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSimplicity: Make it simple for new engineer in team.\u003c/li\u003e\n\u003cli\u003eEvolvability: Make it easy to make changes in system for future requirement.\u003c/li\u003e\n\u003c/ul\u003e\n","description":"Reliable Scalable and Maintainable Applications","image":null,"permalink":"https://maheshlogs.dev/posts/reliable-scalable-and-maintainable-applications/","title":"Chapter01 - Reliable Scalable and Maintainable Applications"},{"content":"\u003ch1 id=\"hi-im-mahesh\"\u003eHi, I’m Mahesh.\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eI build web products and lead engineers. I’m an engineering manager, a software engineer and everything in between.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been a professional software engineer since 2003 and building and managing high performing software engineering teams at the 3Pillar Global.\u003c/p\u003e\n\u003cp\u003eI’m particularly interested in building and managing high performing software engineering teams, system designing, full stack development, distributed systems, learning new stuff and applying it while solving the problems\u003c/p\u003e\n\u003cp\u003eApart from computers, I really enjoy reading, walking, playing with my daughters.\u003c/p\u003e\n\u003cp\u003eIf you have any questions or just want to chat, you can drop me an \u003ca href=\"mailto:singh.mahesh@gmail.com\"\u003eemail\u003c/a\u003e.\n\u003ca rel=\"me\" href=\"https://mastodon.social/@maheshsingh\"\u003eMastodon\u003c/a\u003e\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://maheshlogs.dev/about/","title":"About"}]